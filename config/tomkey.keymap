#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// OS設定を日本語キーボードのまま使用するための変換定義

#define JP_DQUOTE       AT                // "
#define JP_AMPERSAND    CARET             // &
#define JP_QUOTE        AMPERSAND         // '
#define JP_EQUAL        UNDER             // =
#define JP_CARET        EQUAL             // ^
#define JP_YEN          0x89              // ¥
#define JP_PLUS         COLON             // +
#define JP_TILDE        PLUS              // ~
#define JP_PIPE         LS(0x89)          // |
#define JP_AT           LEFT_BRACKET      // @
#define JP_COLON        SINGLE_QUOTE      // :
#define JP_ASTERISK     DOUBLE_QUOTES     // *
#define JP_BACKQUOTE    LEFT_BRACE        // `
#define JP_UNDERSCORE   LS(0x87)          // _
#define JP_LBRACKET     RIGHT_BRACKET     // [
#define JP_RBRACKET     BACKSLASH         // ]
#define JP_LPAREN       ASTERISK          // (
#define JP_RPAREN       LEFT_PARENTHESIS  // )
#define JP_LBRACE       RIGHT_BRACE       // {
#define JP_RBRACE       PIPE              // }
#define JP_KANA         LANGUAGE_1        // かな
#define JP_EISU         LANGUAGE_2        // 英数
#define JP_HANZEN       GRAVE             // 半角/全角

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q              &kp W             &kp E             &kp R      &kp T                                                     &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A              &kp S             &kp D             &kp F      &kp G            &kp LEFT_BRACKET      &kp RIGHT_BRACKET  &kp H        &kp J  &kp K      &kp L    &mt RIGHT_ALT MINUS
&kp Z              &kp X             &kp C             &kp V      &kp B            &kp CAPS              &kp TAB            &kp N        &kp M  &kp COMMA  &kp DOT  &mt RCTRL SLASH
&mt LSHIFT ESCAPE  &mt LCTRL DELETE  &mt TAB CAPSLOCK  &lt 5 TAB  &lt 3 BACKSPACE  &kp LEFT_WIN          &kp RSHIFT         &lt 4 SPACE                             &mt RGUI ENTER
            >;
        };

        AutoMouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans     &trans     &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp LCLK  &mkp MCLK  &mkp RCLK  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans     &trans     &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                   &trans
            >;
        };

        Scroll {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &to 5                           &trans
            >;
        };

        Cursor+Num {
            bindings = <
&kp LC(SPACE)  &kp LC(LEFT_ARROW)  &kp UP_ARROW    &kp LC(RIGHT)    &mkp MCLK                                     &kp TILDE        &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp LS(MINUS)
&mo 2          &kp LEFT            &kp DOWN_ARROW  &kp RIGHT_ARROW  &mkp LCLK  &trans      &trans                 &kp KP_SLASH     &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_MINUS
&kp LG(Z)      &kp LG(X)           &kp LG(C)       &kp LG(V)        &mkp RCLK  &trans      &trans                 &kp KP_ASTERISK  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_PLUS
&trans         &trans              &trans          &kp KP_NUM       &trans     &trans      &mt RIGHT_SHIFT KP_N0  &kp KP_DOT                                                          &trans
            >;
        };

        Function {
            bindings = <
&kp LS(NUMBER_1)  &kp DOUBLE_QUOTES  &kp LS(NUMBER_3)  &kp LS(NUMBER_4)   &kp LS(N5)                         &kp F1            &kp F2    &kp F3        &kp F4            &kp F5
&kp LS(N7)        &kp SINGLE_QUOTE   &kp LS(N9)        &kp LS(N0)         &kp EQUAL      &trans      &trans  &kp F6            &kp F7    &kp F8        &kp F9            &mt RALT F10
&kp BACKSLASH     &kp LS(BACKSLASH)  &kp LS(NUMBER_6)  &kp LC(LS(SPACE))  &kp LC(SPACE)  &trans      &trans  &kp LS(NUMBER_2)  &kp SEMI  &kp LS(SEMI)  &kp LEFT_BRACKET  &mt RCTRL RIGHT_BRACKET
&trans            &trans             &trans            &trans             &sys_reset     &trans      &trans  &to 5                                                       &to 5
            >;
        };

        EXT {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5                            &msc SCRL_DOWN      &msc SCRL_RIGHT  &kp LC(R)  &msc SCRL_LEFT  &trans
&kp NUMBER_6  &kp N7        &kp N8        &kp N9        &kp N0        &trans      &trans  &kp LA(LEFT_ARROW)  &mkp LCLK        &mkp MCLK  &mkp RCLK       &kp LA(RIGHT)
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &to 0       &to 6   &msc SCRL_UP        &kp LS(LC(TAB))  &kp LC(W)  &kp LC(TAB)     &trans
&trans        &kp LG(N)     &bt BT_CLR    &trans        &to 0         &trans      &trans  &to 2                                                           &trans
            >;
        };

        DEFAULT2 {
            bindings = <
&kp Q              &kp W                &kp E                  &kp R      &kp T                                                  &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A              &kp S                &kp D                  &kp F      &kp G            &kp RIGHT_BRACKET      &kp BACKSLASH  &kp H        &kp J  &kp K      &kp L    &kp MINUS
&kp Z              &kp X                &kp C                  &kp V      &kp B            &kp CAPS               &kp TAB        &kp N        &kp M  &kp COMMA  &kp DOT  &mt RIGHT_ALT SLASH
&mt LSHIFT ESCAPE  &mt LEFT_ALT DELETE  &mt LEFT_WIN CAPSLOCK  &lt 9 TAB  &lt 7 BACKSPACE  &kp LCTRL              &kp RSHIFT     &lt 8 SPACE                             &mt RCTRL ENTER
            >;
        };

        layer_5 {
            bindings = <
&kp TILDE  &kp HOME   &kp UP_ARROW    &kp END          &mkp MCLK                                     &kp JP_TILDE     &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp JP_UNDERSCORE
&mo 2      &kp LEFT   &kp DOWN_ARROW  &kp RIGHT_ARROW  &mkp LCLK  &trans      &trans                 &kp KP_SLASH     &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_MINUS
&kp LC(Z)  &kp LC(X)  &kp LC(C)       &kp LC(V)        &mkp RCLK  &trans      &trans                 &kp KP_ASTERISK  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_PLUS
&trans     &trans     &trans          &kp KP_NUM       &trans     &trans      &mt RIGHT_SHIFT KP_N0  &kp KP_DOT                                                          &trans
            >;
        };

        layer_6 {
            bindings = <
&kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(NUMBER_3)  &kp LS(NUMBER_4)     &kp LS(N5)                               &kp F1            &kp F2    &kp F3            &kp F4             &kp F5
&kp LS(NUMBER_6)  &kp LS(N7)        &kp LS(N8)        &kp LS(N9)           &kp LS(N0)           &trans      &trans  &kp F6            &kp F7    &kp F8            &kp F9             &kp F10
&kp JP_YEN        &kp JP_PIPE       &kp JP_CARET      &kp INTERNATIONAL_5  &kp INTERNATIONAL_4  &trans      &trans  &kp LEFT_BRACKET  &kp SEMI  &kp SINGLE_QUOTE  &kp RIGHT_BRACKET  &mt RIGHT_ALT BACKSLASH
&trans            &trans            &trans            &trans               &sys_reset           &trans      &trans  &to 9                                                            &to 9
            >;
        };

        layer_7 {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5                            &msc SCRL_DOWN      &msc SCRL_RIGHT  &kp LC(R)  &msc SCRL_LEFT  &trans
&kp NUMBER_6  &kp N7        &kp N8        &kp N9        &kp N0        &trans      &trans  &kp LA(LEFT_ARROW)  &mkp LCLK        &mkp MCLK  &mkp RCLK       &kp LA(RIGHT)
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &to 0       &to 6   &msc SCRL_UP        &kp LS(LC(TAB))  &kp LC(W)  &kp LC(TAB)     &trans
&trans        &kp LG(N)     &bt BT_CLR    &trans        &to 6         &trans      &trans  &to 4                                                           &trans
            >;
        };
    };
};
